// <auto-generated />
using System;
using MarsWeatherApi.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarsWeatherApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220307115932_CreateInitial")]
    partial class CreateInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MarsWeatherApi.Models.Pressure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Average")
                        .HasColumnType("real");

                    b.Property<float>("Maximum")
                        .HasColumnType("real");

                    b.Property<float>("Minimum")
                        .HasColumnType("real");

                    b.Property<int>("SolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolId")
                        .IsUnique();

                    b.ToTable("Pressures");
                });

            modelBuilder.Entity("MarsWeatherApi.Models.Sol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SolNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sols");
                });

            modelBuilder.Entity("MarsWeatherApi.Models.Temperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Average")
                        .HasColumnType("real");

                    b.Property<float>("Maximum")
                        .HasColumnType("real");

                    b.Property<float>("Minimum")
                        .HasColumnType("real");

                    b.Property<int>("SolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolId")
                        .IsUnique();

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("MarsWeatherApi.Models.Wind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Average")
                        .HasColumnType("real");

                    b.Property<float>("Maximum")
                        .HasColumnType("real");

                    b.Property<float>("Minimum")
                        .HasColumnType("real");

                    b.Property<string>("MostCommonDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolId")
                        .IsUnique();

                    b.ToTable("Winds");
                });

            modelBuilder.Entity("MarsWeatherApi.Models.Pressure", b =>
                {
                    b.HasOne("MarsWeatherApi.Models.Sol", "Sol")
                        .WithOne("Pressure")
                        .HasForeignKey("MarsWeatherApi.Models.Pressure", "SolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sol");
                });

            modelBuilder.Entity("MarsWeatherApi.Models.Temperature", b =>
                {
                    b.HasOne("MarsWeatherApi.Models.Sol", "Sol")
                        .WithOne("Temperature")
                        .HasForeignKey("MarsWeatherApi.Models.Temperature", "SolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sol");
                });

            modelBuilder.Entity("MarsWeatherApi.Models.Wind", b =>
                {
                    b.HasOne("MarsWeatherApi.Models.Sol", "Sol")
                        .WithOne("Wind")
                        .HasForeignKey("MarsWeatherApi.Models.Wind", "SolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sol");
                });

            modelBuilder.Entity("MarsWeatherApi.Models.Sol", b =>
                {
                    b.Navigation("Pressure")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();

                    b.Navigation("Wind")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
